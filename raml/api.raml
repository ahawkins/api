#%RAML 1.0
title: Semaphore
version: v2
baseUri: https://api.semaphoreci.com
mediaType: application/json

types:
  Error:
    type: object
    properties:
      message: string
  User:
    type: object
    properties:
      username: string
      email: string
      realname: string
  Org:
    type: object
    properties:
      id: integer
      name: string
      username: string
      description: string
  TeamPatch:
    type: object
    properties:
      name?: string
      permission?:
        enum: [read, write, admin]
      description?: string
  TeamPost:
    type: object
    properties:
      name: string
      permission:
        enum: [read, write, admin]
      description?: string
  Team:
    type: TeamPost
    properties:
      id: integer
      url: string
  ProjectPost:
    type: object
    properties:
      name: string
      description?: string
  ProjectPatch:
    type: object
    properties:
      name?: string
      description?: string
  Project:
    type: ProjectPost
    properties:
      id: integer
  SharedConfigPatch:
    type: object
    properties:
      name?: string
      description?: string
  SharedConfigPost:
    type: object
    properties:
      name: string
      description?: string
  SharedConfig:
    type: SharedConfigPost
    properties:
      id: integer
  SharedEnvVarPatch:
    type: object
    properties:
      key?: string
      value?: string
  SharedEnvVarPost:
    type: object
    properties:
      name: string
      value: string
  SharedEnvVar:
    type: SharedEnvVarPost
    properties:
      id: integer
  SharedConfFilePatch:
    type: object
    properties:
      name?: string
      content?: string
  SharedConfFilePost:
    type: object
    properties:
      path: string
      content: string
  SharedConfFile:
    type: SharedConfFilePost
    properties:
      id: integer

traits:
  withRequestItem:
    body:
      application/json:
        type: <<item>>
  withResponseItem:
    responses:
      200:
        body:
          application/json:
            type: <<item>>
  withResponseItems:
    responses:
      200:
        body:
          application/json:
            type: <<item>>[]
  withCreateResponse:
    responses:
      201:
        body:
          application/json:
            type: <<item>>
  withNoBodyResponse:
    responses:
      204:
  withClientError:
    responses:
      400:
        body:
          application/json:
            type: Error
  withNotFoundError:
    responses:
      404:
        body:
          application/json:
            type: Error
  withPreconditionFailedError:
    responses:
      412:
        body:
          application/json:
            type: Error

/users:
  description: "Manage Semaphore users\n\n
  Precondition:\n - All operations require outhorization
"
  get:
    description: "List all users\n\n
      Precondition:\n\n
      Post:
    "
    is: [ withResponseItems: {item : User}, withClientError ]

  /{username}:
    get:
      description: "Show {user_id} user details\n\n
      Precondition:\n - user with {user_id} exists\n\n\n
      Postcondition:
      "
    delete:
      description: "Delete {user_id} user
      Precondition:\n - user with {user_id} exists\n\n\n
      Postcondition:
      "

/orgs:
  description: "Manage Semaphore organizations\n\n
    Precondition:\n - All operations require outhorization
  "
  get:
    description: Get list of all organizations available to the user
    is: [withResponseItems: {item : Org}]
  /{org_username}:
    get:
      description: "Get organization details\n\n
      Precondition:\n - organization with {org_id} exists\n\n\n
      Postcondition:
      "
      is: [withResponseItem: {item : Org}, withNotFoundError]
    /teams:
      get:
        description: "List teams that belong to {org_username} organisation\n\n
        Precondition:\n - organization with {org_id} exists\n\n\n
        Postcondition:
        "
        is: [withResponseItems: {item : Team}]
      post:
        description: "Create team within the {org_username} organization.\n\n
        Precondition:\n - team with {name} in request body does not exist\n\n\n
        Postcondition:\n - team with {name} in request body {org_id} exists
        "
        is: [withRequestItem: {item : TeamPost},
             withResponseItem: {item : Team},
             withNotFoundError,
             withPreconditionFailedError]
    /projects:
      get:
        description: "List projects that belong to {org_username} organisation\n\n
        Precondition:\n\n\n
        Postcondition:
        "
        is: [withResponseItems: {item : Project}]
      post:
        description: "Create project within the {org_username} organization\n\n
        Note:\n - Projects with the same name can exist.
              Theu are uniquely identified by id.\n\n\n
        Precondition:\n - User is member of {admin} or {owner} group.\n\n\n
        Postcondition:\n - new project with {name} from requst body and new id exists.
        "
        is: [withRequestItem: {item : ProjectPost},
             withResponseItem: {item : Project},
             withNotFoundError,
             withPreconditionFailedError]
    /shared-configurations:
      get:
        description: "List shared configurations that belong to {org_username} organisation\n\n\n
        Precondition:\n - user has to be member of {???} teams\n\n\n
        Postcondition:\n
        "
        is: [withResponseItems: {item : SharedConfig}]
      post:
        description: "Create shared configuration within the {org_username} organization\n\n
        Precondition:\n - shared config with {name} in request body does not exist\n\n\n
        Postcondition:\n - shared config with {name} in request body {org_id} exists
        "
        is: [withRequestItem: {item : SharedConfigPost},
            withResponseItem: {item : SharedConfig},
            withNotFoundError,
            withPreconditionFailedError]

/teams/{team_id}:
  description: Manage Semaphore teams
  get:
    description: "Get team details\n\n
    Precondition:\n - team with {team_id} does not exist\n\n\n
    Postcondition:\n - team with {team_id} exists
    "
    is: [withResponseItem: {item : Team}, withNotFoundError]
  delete:
    description: "Delete team\n\n
    Precondition:\n - team with {team_id} exists\n\n\n
    Postcondition:\n - team with {team_id} does not exist
    "
    is: [withNoBodyResponse, withNotFoundError]
  patch:
    description: "Update team.\n\n
    Precondition:\n - team with {team_id} exists.\n\n\n
    Postcondition:\n - team with {team_id} exists but with altered attributes.
    "
    is: [withRequestItem: {item : TeamPatch}, withResponseItem: {item : Team}, withNotFoundError]
  /users:
    description: Manage relations between {team_id} team and itc members
    get:
      description: List {team_id} team members
      is: [withResponseItems: {item : User}, withNotFoundError]
    /{username}:
      post:
        description: Grant {username} user membership in {team_id} team
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: Revoke {username} user membership in {team_id} team
        is: [withNoBodyResponse, withNotFoundError]
  /projects:
    description: Manage relations between {team_id} team and itc projects
    get:
      description: List all projects belonging to {team_id} team
      is: [withResponseItems: {item : Project}, withNotFoundError]
    /{project_id}:
      post:
        description: Add a project to {team_id} team
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: Remove a project from {team_id} team
        is: [withNoBodyResponse, withNotFoundError]
  /shared-configurations:
    get:
      description: List all shared configurations added to {team_id} team
      is: [withResponseItems: {item : SharedConfig}, withNotFoundError]
    /{sc_id}:
      description: Manage relations between {team_id} team and
                    {sc_id} shared configuration
      post:
        description: Add {sc_id} shared configuration to {team_id} team
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: Remove {sc_id} shared configuration from {team_id} team
        is: [withNoBodyResponse, withNotFoundError]

/projects/{project_id}:
  description: Manage Semaphore projects
  get:
    description: Show {project_id} project details
    is: [withResponseItem: {item : Project}, withNotFoundError]
  delete:
    description: Delete {project_id} project
    is: [withNoBodyResponse, withNotFoundError]
  patch:
    description: Update {project_id} project
    is: [withRequestItem: {item : ProjectPatch}, withResponseItem: {item : Project}, withNotFoundError]
  /shared-configurations:
    get:
      description: List all shared configurations attached to {project_id} project
      is: [withResponseItems: {item : SharedConfig}, withNotFoundError]
    /{sc_id}:
      post:
        description: Attach {sc_id} shared configuration to {project_id} project
        is: [withResponseItem: {item : SharedConfig}, withNotFoundError]
      delete:
        description: Dettach {sc_id} shared configuration from {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
  /shared-environment-variables:
    get:
      description: List all shared env variables connected to
                    {project_id} project
      is: [withResponseItems: {item : SharedEnvVar}, withNotFoundError]
    /{sev_id}:
      post:
        description: Connect {sev_id} shared env var to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: Dissconnect {sev_id} shared env var from {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
  /shared-configuration-files:
    get:
      description: List all shared conf files connected to {project_id} project
      is: [withResponseItems: {item : SharedConfFile}, withNotFoundError]
    /{scf_id}:
      post:
        description: Connect {scf_id} shared conf file to {project_id} project
        is: [withNoBodyResponse, withNotFoundError]
      delete:
        description: Dissconnect {scf_id} shared conf file from {project_id} project
        is: [withNoBodyResponse, withNotFoundError]

/shared-configurations:
  description: Manage Semaphore shared configurations
  /{sc_id}:
    get:
      description: Show {sc_id} shared config details
      is: [withResponseItem: {item : SharedConfig}, withNotFoundError]
    delete:
      description: Delete {sc_id} shared config
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: Update {sc_id} shared config
      is: [withRequestItem: {item : SharedConfigPatch},
          withResponseItem: {item : SharedConfig}, withNotFoundError]
    /shared-environment-variables:
      get:
        description: List all shared env variables belonging to {sc_id} shared config
        is: [withResponseItems: {item : SharedEnvVar}, withNotFoundError]
      post:
        description: Create shared environment variable within {sc_id} shared config
        is: [withRequestItem: {item : SharedEnvVarPost},
            withResponseItem: {item : SharedEnvVar}, withNotFoundError]
    /shared-configuration-files:
      get:
        description: List all shared config files belonging to {sc_id} shared config
        is: [withResponseItems: {item : SharedConfFile}, withNotFoundError]
      post:
        description: Create shared config file within {sc_id} shared configuration
        is: [withRequestItem: {item : SharedConfFilePost},
            withResponseItem: {item : SharedConfFile}, withNotFoundError]

/shared-environment-variables:
  description: Manage Semaphore shared environment variables
  /{sev_id}:
    get:
      description: Show {sev_id} shared env variable details
      is: [withResponseItem: {item : SharedEnvVar}, withNotFoundError]
    delete:
      description: Delete {sev_id} shared env variable
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: Update {sev_id} shared env variable
      is: [withRequestItem: {item : SharedEnvVarPatch},
          withResponseItem: {item : SharedEnvVar}, withNotFoundError]

/shared-configuration-files:
  description: Manage Semaphore shared configuration files
  /{scf_id}:
    get:
      description: Show {scf_id} shared config file details
      is: [withResponseItem: {item : SharedConfFile}, withNotFoundError]
    delete:
      description: Delete {scf_id} shared config file
      is: [withNoBodyResponse, withNotFoundError]
    patch:
      description: Update {scf_id} shared config file
      is: [withRequestItem: {item : SharedConfFilePatch},
          withResponseItem: {item : SharedConfFile}, withNotFoundError]
