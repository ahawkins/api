#!/usr/bin/env ruby

require "json"

class Publisher

  def initialize(bucket_name, api_file)
    @bucket_name = bucket_name
    @api_file = api_file
  end

  def publish
    abort "Please export the S3_BUCKET_NAME variable and try again." if @bucket_name.nil?
    abort "api.json file not found" unless File.exists?(@api_file)

    @version = JSON.parse(File.read("api.json"))["version"]

    abort "Can't find specification version in #{@api_file}" if @version.nil?

    publish_new_version
    publish_new_index

    puts "\nNew version '#{@version}' published. Visit http://#{@bucket_name}/."
  end

  def publish_new_version
    puts "[1/2] Publishing new api specification"

    spec_path = "api_specs_#{@version.gsub(".", "_")}.json"

    abort "#{spec_path} is already published" if published_versions.include?(spec_path)

    s3_path = "s3://#{@bucket_name}/#{spec_path}"

    puts "Publishing api specs #{@version} to #{s3_path}"

    system "aws s3 cp #{@api_file} #{s3_path} --acl=public-read"
  end

  def publish_new_index
    puts "[2/2] Regenerating index page"

    links = published_versions.map { |spec| "<li><a href='http://#{@bucket_name}/#{spec}'>#{spec}</a></li>" }
    html  = "<ul>" + links.join("\n") + "</ul>"

    index_path = "/tmp/index.html"
    s3_index_path = "s3://#{@bucket_name}/index.html"

    File.write(index_path, html)

    system "aws s3 cp #{index_path} #{s3_index_path} --acl=public-read"
  end

  def published_versions
    `aws s3 ls #{@bucket_name} | grep "api_specs" | awk '{ print $4 }'`.split("\n")
  end

end

Publisher.new(ENV["S3_BUCKET_NAME"], "api.json").publish
