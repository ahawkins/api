class SemaphoreClient
  module Model
    class <%= @name %>
      attr_reader <%= @immutable_attributes.map { |attributes| ":#{attributes}" }.join(", ") %>
      <%- if @mutable_attributes.any? -%>
      attr_accessor <%= @mutable_attributes.map { |attributes| ":#{attributes}" }.join(", ") %>
      <%- end -%>

      def self.load(attributes)
        new.load(attributes)
      end

      def self.create(attributes)
        new.update(attributes)
      end

      def load(attributes)
        attributes = symbolize_keys(attributes)

        <%- @attributes.each do |attribute| -%>
        @<%= attribute %> = attributes[:<%= attribute %>] if attributes.key?(:<%= attribute %>)
        <%- end -%>

        self
      end

      def update(attributes)
        <%- if @mutable_attributes.any? -%>
        attributes = symbolize_keys(attributes)

        updatable_keys = [<%= @mutable_attributes.map { |attributes| ":#{attributes}" }.join(", ") %>]

        if (attributes.keys - updatable_keys).any?
          raise SemaphoreClient::Exceptions::AttributeNotAvailable
        end

        <%- @mutable_attributes.each do |attribute| -%>
        @<%= attribute %> = attributes[:<%= attribute %>] if attributes.key?(:<%= attribute %>)
        <%- end -%>

        <%- end -%>
        self
      end

      def serialize
        <%- if @mutable_attributes.any? -%>
        object_hash = {
          <%- @mutable_attributes.each do |attribute| -%>
          "<%= attribute %>" => @<%= attribute %>,
          <%- end -%>
        }

        object_hash.delete_if { |_, value| value.nil? }
        <%- else -%>
        {}
        <%- end -%>
      end

      private

      def symbolize_keys(hash)
        Hash[hash.map { |key, value| [key.to_sym, value] }]
      end
    end
  end
end
