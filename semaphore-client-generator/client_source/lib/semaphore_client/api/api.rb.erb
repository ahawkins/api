<%- class MethodNotSupported < StandardError; end -%>
class SemaphoreClient
  module Api
    class <%= @name %>
      def initialize(http_client)
        @http_client = http_client
      end

      <%- @methods.each do |method| -%>
        <%- if method.type == SemaphoreClientGenerator::Operation::GET -%>
      def get(id)
        get!(id)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::UPDATE -%>
      def update(id, params)
        update!(id, params)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::DELETE -%>
      def delete(id)
        delete!(id)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::CREATE_DEPENDENT -%>
      def create_for_<%= method.related_entity %>(<%= method.related_entity %>_id, params)
        create_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_DEPENDENT -%>
      def list_for_<%= method.related_entity %>(<%= method.related_entity %>_id, query = nil)
        list_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, query)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_ALL -%>
      def list
        list!
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif [SemaphoreClientGenerator::Operation::ATTACH, SemaphoreClientGenerator::Operation::ADD].include?(method.type) -%>
      def attach_to_<%= method.related_entity %>(<%= @key %>_id, <%= method.related_entity %>_id)
        attach_to_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- elsif [SemaphoreClientGenerator::Operation::DETACH, SemaphoreClientGenerator::Operation::REMOVE].include?(method.type) -%>
      def detach_from_<%= method.related_entity %>(<%= @key %>_id, <%= method.related_entity %>_id)
        detach_from_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id)
      rescue SemaphoreClient::Exceptions::RequestFailed
      end

        <%- else -%>
          <%- raise MethodNotSupported -%>
        <%- end -%>
      <%- end -%>
      <%- @methods.each do |method| -%>
        <%- if method.type == SemaphoreClientGenerator::Operation::GET -%>
      def get!(id)
        response = @http_client.get([:<%= @key.pluralize %>, id])

        assert_response_status(response, 200)

        content = JSON.parse(response.body)

        SemaphoreClient::Model::<%= @name %>.load(content)
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::UPDATE -%>
      def update!(id, params)
        response = @http_client.patch([:<%= @key.pluralize %>, id], params.to_json)

        assert_response_status(response, 200)

        content = JSON.parse(response.body)

        SemaphoreClient::Model::<%= @name %>.load(content)
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::DELETE -%>
      def delete!(id)
        response = @http_client.delete([:<%= @key.pluralize %>, id])

        assert_response_status(response, 200)
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::CREATE_DEPENDENT -%>
      def create_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params)
        response = @http_client.post([:<%= method.related_entity.pluralize %>, <%= method.related_entity %>_id, :<%= @key.pluralize %>], params.to_json)

        assert_response_status(response, 200)

        content = JSON.parse(response.body)

        SemaphoreClient::Model::<%= @name %>.load(content)
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_DEPENDENT -%>
      def list_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, query = nil)
        query_string =
          unless query.nil? || query.empty?
            "?" + query.map { |key, value| "#{key}=#{value}" }.join("&")
          end

        response = @http_client.get([:<%= method.related_entity.pluralize %>, <%= method.related_entity %>_id, :<%= @key.pluralize %>, query_string].compact)

        assert_response_status(response, 200)

        content = JSON.parse(response.body)

        content.map do |entity|
          SemaphoreClient::Model::<%= @name %>.load(entity)
        end
      end

        <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_ALL -%>
      def list!
        response = @http_client.get([:<%= @key.pluralize %>])

        assert_response_status(response, 200)

        content = JSON.parse(response.body)

        content.map do |entity|
          SemaphoreClient::Model::<%= @name %>.load(entity)
        end
      end

        <%- elsif [SemaphoreClientGenerator::Operation::ATTACH, SemaphoreClientGenerator::Operation::ADD].include?(method.type) -%>
      def attach_to_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id)
        response = @http_client.post([:<%= method.related_entity.pluralize %>, <%= method.related_entity %>_id, :<%= @key.pluralize %>, <%= @key %>_id])

        assert_response_status(response, 204)
      end

        <%- elsif [SemaphoreClientGenerator::Operation::DETACH, SemaphoreClientGenerator::Operation::REMOVE].include?(method.type) -%>
      def detach_from_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id)
        response = @http_client.delete([:<%= method.related_entity.pluralize %>, <%= method.related_entity %>_id, :<%= @key.pluralize %>, <%= @key %>_id])

        assert_response_status(response, 204)
      end

        <%- else -%>
          <%- raise MethodNotSupported -%>
        <%- end -%>
      <%- end -%>
      private

      def assert_response_status(response, expected_status)
        return if response.status == expected_status

        raise SemaphoreClient::Exceptions::RequestFailed, response.status
      end
    end
  end
end
