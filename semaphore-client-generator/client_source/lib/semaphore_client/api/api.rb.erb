class SemaphoreClient
  module Api
    class <%= @name %>
      def initialize(http_client)
        @http_client = http_client
      end

<%- @methods.each do |method| -%>
  <%- if method.type == SemaphoreClientGenerator::Operation::GET -%>

      def get(id, params = nil)
        get!(id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def get!(id, params = nil)
        path = "/<%= @key.pluralize %>/#{id}"
        response = @http_client.get(path, params = {})

        SemaphoreClient::Model::<%= @name %>.load(response.body)
      end

  <%- elsif method.type == SemaphoreClientGenerator::Operation::UPDATE -%>

      def update(id, params = nil)
        update!(id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def update!(id, params = nil)
        path = "/<%= @key.pluralize %>/#{id}"
        response = @http_client.patch(path, params)

        SemaphoreClient::Model::<%= @name %>.load(response.body)
      end

  <%- elsif method.type == SemaphoreClientGenerator::Operation::DELETE -%>

      def delete(id, params = nil)
        delete!(id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def delete!(id, params = nil)
        path = "/<%= @key.pluralize %>/#{id}"

        @http_client.delete(path, params)
      end

  <%- elsif method.type == SemaphoreClientGenerator::Operation::CREATE_DEPENDENT -%>

      def create_for_<%= method.related_entity %>(<%= method.related_entity %>_id, params = nil)
        create_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def create_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params = nil)
        path = "/<%= method.related_entity.pluralize %>/#{<%= method.related_entity %>_id}/<%= @key.pluralize %>"
        response = @http_client.post(path, params)

        SemaphoreClient::Model::<%= @name %>.load(response.body)
      end

  <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_DEPENDENT -%>

      def list_for_<%= method.related_entity %>(<%= method.related_entity %>_id, params = nil)
        list_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def list_for_<%= method.related_entity %>!(<%= method.related_entity %>_id, params = nil)
        path = "/<%= method.related_entity.pluralize %>/#{<%= method.related_entity %>_id}/<%= @key.pluralize %>"

        @http_client.get(path, params).body.map { |e| SemaphoreClient::Model::<%= @name %>.load(e) }
      end

  <%- elsif method.type == SemaphoreClientGenerator::Operation::LIST_ALL -%>

      def list(params = nil)
        list!(params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def list!(params = nil)
        path = "/<%= @key.pluralize %>"

        @http_client.get(path, params).body.map { |e| SemaphoreClient::Model::<%= @name %>.load(e) }
      end

  <%- elsif [SemaphoreClientGenerator::Operation::ATTACH, SemaphoreClientGenerator::Operation::ADD].include?(method.type) -%>

      def attach_to_<%= method.related_entity %>(<%= @key %>_id, <%= method.related_entity %>_id, params = nil)
        attach_to_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def attach_to_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id, params = nil)
        path = "/<%= method.related_entity.pluralize %>/#{<%= method.related_entity %>_id}/<%= @key.pluralize %>/#{<%= @key %>_id}"

        @http_client.post(path, params)
      end

  <%- elsif [SemaphoreClientGenerator::Operation::DETACH, SemaphoreClientGenerator::Operation::REMOVE].include?(method.type) -%>

      def detach_from_<%= method.related_entity %>(<%= @key %>_id, <%= method.related_entity %>_id, params = nil)
        detach_from_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id, params)
      rescue SemaphoreClient::Exceptions::ResponseError
      end

      def detach_from_<%= method.related_entity %>!(<%= @key %>_id, <%= method.related_entity %>_id, params = nil)
        path = "/<%= method.related_entity.pluralize %>/#{<%= method.related_entity %>_id}/<%= @key.pluralize %>/#{<%= @key %>_id}"

        @http_client.delete(path, params)
      end

  <%- else -%>
    <%- raise "http method not supported" -%>
  <%- end -%>

<%- end -%>
    end
  end
end
